#!/usr/bin/env node
var debug = require('debug')('iosocket');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var socketIO = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつける)
var io = socketIO.listen(server);

var usernames = {};
var numUsers = 0;
var passes = [];
var positions = ['GK', 'DF', 'MF', 'FW'];
var relativePositions = {
  'FW' : 'MF',
  'MF' : 'DF',
  'DF' : 'GK',
  'GK' : 'FW'
};
var idx = Math.floor(Math.random() * positions.length);
var recentPosition = positions[idx];

// クライアント接続時処理
io.on('connection', function(socket) {
  console.log("connection");
  var addedUser = false;

  socket.on('pass', function(data) {
    passes.push(socket.username + "(" + socket.position + ")");
    if (recentPosition === relativePositions[socket.position]) {
      socket.point = socket.point + 1;
    }
    var passMessage = "";
    if (passes.length > 0) {
      passMessage = passes.join("->");
    }
    else {
      passMessage = passes[0];
    }
    socket.broadcast.emit('pass', {
      username: socket.username,
      message: 'pass ' + passMessage
    });
    recentPosition = socket.position;

    socket.emit('point up', {
      point: socket.point
    });
  });

  socket.on('new message', function (data) {
    socket.broadcast.emit('new message', {
      username: socket.username,
      message: data
    });
  });

  socket.on('add user', function (username) {
    var ridx = Math.floor(Math.random() * positions.length);
    socket.username = username;
    socket.position = positions[ridx];
    socket.point = 0;
    usernames[username] = username;
    ++numUsers;
    addedUser = true;

    socket.emit('login', {
      numUsers: numUsers,
      position: socket.position,
      point: socket.point
    });
    socket.broadcast.emit('user joined', {
      username: socket.username,
      numUsers: numUsers
    });
  });

  socket.on('typing', function () {
    socket.broadcast.emit('typing', {
      username: socket.username
    });
  });

  socket.on('stop typing', function () {
    socket.broadcast.emit('stop typing', {
      username: socket.username
    });
  });
  
  socket.on('disconnect', function() {
    if (addedUser) {
      delete usernames[socket.username];
      --numUsers;

      socket.broadcast.emit('user left', {
        username: socket.username,
        numUsers: numUsers
      });
    }
  });
});
