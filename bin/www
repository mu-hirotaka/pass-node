#!/usr/bin/env node
var debug = require('debug')('iosocket');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var socketIO = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつける)
var io = socketIO.listen(server);

var usernames = {};
var numUsers = 0;
var passes = [];
var positions = ['GK', 'DF', 'MF', 'FW'];
var relativePositions = {
  'FW' : 'MF',
  'MF' : 'DF',
  'DF' : 'GK',
  'GK' : 'FW'
};
var idx = Math.floor(Math.random() * positions.length);
var recentPosition = positions[idx];
var bossHps = ['1000', '10000', '100000'];
var bossHp = bossHps[Math.floor(Math.random() * bossHps.length)];
var currentBossHp = bossHp;

// クライアント接続時処理
io.on('connection', function(socket) {
  console.log("connection");
  var addedUser = false;

  socket.on('pass', function(data) {
    passes.push(socket.username + "(" + socket.position + ")");
    socket.point += 1;
    if (recentPosition === relativePositions[socket.position]) {
      socket.point = socket.point + socket.point * 5;
    }
    var passMessage = passes[0];
    if (passes.length > 0) {
      passMessage = passes.join("->");
    }
    socket.broadcast.emit('pass', {
      username: socket.username,
      message: 'pass ' + passMessage
    });
    recentPosition = socket.position;

    socket.emit('point up', {
      point: socket.point
    });

    tmpCurrentBossHp = currentBossHp;
    currentBossHp -= socket.point;
    if (currentBossHp < 0) {
      currentBossHp = 0;
    }
    damage_width = Math.floor(currentBossHp/bossHp * 100 * 0.8);
    io.sockets.emit('boss damaged', {
      before: tmpCurrentBossHp,
      after: currentBossHp,
      width: damage_width + "%"
    });
    if (currentBossHp == 0) {
      io.sockets.emit('new message', {
        username: 'owner',
        message: 'winner: ' + socket.username
      });
      currentBossHp = bossHps[Math.floor(Math.random() * bossHps.length)];
      bossHp = currentBossHp;

      setTimeout(function () {
        io.sockets.emit('new boss', {
          bossHp: currentBossHp
        });
      }, 2000);
    }
  });

  socket.on('new message', function (data) {
    socket.broadcast.emit('new message', {
      username: socket.username,
      message: data
    });
  });

  socket.on('add user', function (username) {
    var ridx = Math.floor(Math.random() * positions.length);
    socket.username = username;
    socket.position = positions[ridx];
    socket.point = 0;
    usernames[username] = username;
    ++numUsers;
    addedUser = true;

    socket.emit('login', {
      numUsers: numUsers,
      position: socket.position,
      point: socket.point,
      bossHp: currentBossHp
    });
    socket.broadcast.emit('user joined', {
      username: socket.username,
      numUsers: numUsers
    });
  });

  socket.on('typing', function () {
    socket.broadcast.emit('typing', {
      username: socket.username
    });
  });

  socket.on('stop typing', function () {
    socket.broadcast.emit('stop typing', {
      username: socket.username
    });
  });
  
  socket.on('disconnect', function() {
    if (addedUser) {
      delete usernames[socket.username];
      --numUsers;

      socket.broadcast.emit('user left', {
        username: socket.username,
        numUsers: numUsers
      });
    }
  });
});
